name: build and publish imgs workflow

on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    outputs:
      BASE_IMAGE_REPO: ${{ steps.compute-image-repo.outputs.BASE_IMAGE_REPO }}
      NOTEBOOKS_IMAGE_REPO: ${{ steps.compute-image-repo.outputs.NOTEBOOKS_IMAGE_REPO }}
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
      BASE_TAG_PREFIX: ${{ steps.compute-tag-prefix.outputs.BASE_TAG_PREFIX }}
      NOTEBOOKS_TAG_PREFIX: ${{ steps.compute-tag-prefix.outputs.NOTEBOOKS_TAG_PREFIX }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Compute matrix
        id: compute-matrix
        run: |
          MATRIX=$(ci/compute-mx.sh)
          echo "MATRIX=${MATRIX}" | tee -a ${GITHUB_OUTPUT}
      - name: Compute tag prefix
        id: compute-tag-prefix
        run: |
          TAG_PREFIX=""
          if [ "${{ inputs.build_type }}" = "pull-request" ]; then
            pr_num="${GITHUB_REF_NAME##*/}"
            BASE_TAG_PREFIX="rapidsai-${pr_num}-"
            NOTEBOOKS_TAG_PREFIX="rapidsai-notebooks-${pr_num}-"
          fi
          echo "BASE_TAG_PREFIX=${BASE_TAG_PREFIX}" | tee -a ${GITHUB_OUTPUT}
          echo "NOTEBOOKS_TAG_PREFIX=${NOTEBOOKS_TAG_PREFIX}" | tee -a ${GITHUB_OUTPUT}
      - name: Compute image repo
        id: compute-image-repo
        run: |
          base_repo="rapidsai"
          notebooks_repo="rapidsai-notebooks"
          if [ "${{ inputs.build_type }}" = "pull-request" ]; then
            base_repo="staging"
            notebooks_repo="staging"
          fi
          echo "BASE_IMAGE_REPO=${base_repo}" | tee -a ${GITHUB_OUTPUT}
          echo "NOTEBOOKS_IMAGE_REPO=${notebooks_repo}" | tee -a ${GITHUB_OUTPUT}
  docker:
    needs: compute-matrix
    strategy:
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
      fail-fast: false
    secrets: inherit
    uses: ./.github/workflows/build-image.yml
    with:
      ARCHES: ${{ toJSON(matrix.ARCHES) }}
      CUDA_VER: ${{ matrix.CUDA_VER }}
      LINUX_VER: ${{ matrix.LINUX_VER }}
      PYTHON_VER: ${{ matrix.PYTHON_VER }}
      RAPIDS_VER: ${{ matrix.RAPIDS_VER }}
      DASK_SQL_VER: ${{ matrix.DASK_SQL_VER }}
      BASE_TAG: rapidsai/${{ needs.compute-matrix.outputs.BASE_IMAGE_REPO }}:${{ needs.compute-matrix.outputs.BASE_TAG_PREFIX }}${{ matrix.RAPIDS_VER }}cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}
      NOTEBOOKS_TAG: rapidsai/${{ needs.compute-matrix.outputs.NOTEBOOKS_IMAGE_REPO }}:${{ needs.compute-matrix.outputs.NOTEBOOKS_TAG_PREFIX }}${{ matrix.RAPIDS_VER }}cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}
  build-multiarch-manifest:
    if: inputs.build_type == 'branch'
    needs: [docker, compute-matrix]
    strategy:
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}
      - name: Create multiarch manifest
        run: |
          base_source_tags=()
          notebooks_source_tags=()
          base_tag="rapidsai/${{ needs.compute-matrix.outputs.BASE_IMAGE_REPO }}:${{ needs.compute-matrix.outputs.BASE_TAG_PREFIX }}${{ matrix.RAPIDS_VER }}cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}"
          notebooks_tag="rapidsai/${{ needs.compute-matrix.outputs.NOTEBOOKS_IMAGE_REPO }}:${{ needs.compute-matrix.outputs.NOTEBOOKS_TAG_PREFIX }}${{ matrix.RAPIDS_VER }}cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}"
          for arch in $(echo '${{ toJSON(matrix.ARCHES) }}' | jq .[] -r); do
            base_source_tags+=("${base_tag}-${arch}")
            notebooks_source_tags+=("${notebooks_tag}-${arch}")
          done
          
          docker manifest create ${base_tag} ${base_source_tags[@]}
          docker manifest push ${base_tag}
          docker manifest create ${notebooks_tag} ${notebooks_source_tags[@]}
          docker manifest push ${notebooks_tag}
  delete-temp-images:
    if: always()
    needs: [compute-matrix, build-multiarch-manifest]
    strategy:
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: ubuntu-latest
    steps:
      - name: Remove temporary images
        run: |
          HUB_TOKEN=$(
            curl -s -H "Content-Type: application/json" \
              -X POST \
              -d "{\"username\": \"${{ secrets.GPUCIBOT_DOCKERHUB_USER }}\", \"password\": \"${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}\"}" \
              https://hub.docker.com/v2/users/login/ | jq -r .token \
          )

          org="rapidsai"
          base_repo="${{ needs.compute-matrix.outputs.BASE_IMAGE_REPO }}"
          base_tag="${{ needs.compute-matrix.outputs.BASE_TAG_PREFIX }}${{ matrix.RAPIDS_VER }}cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}"
          notebooks_repo="${{ needs.compute-matrix.outputs.NOTEBOOKS_IMAGE_REPO }}"
          notebooks_tag="${{ needs.compute-matrix.outputs.NOTEBOOKS_TAG_PREFIX }}${{ matrix.RAPIDS_VER }}cuda${{ matrix.CUDA_VER }}-${{ matrix.LINUX_VER }}-py${{ matrix.PYTHON_VER }}"

          for arch in $(echo '${{ toJSON(matrix.ARCHES) }}' | jq .[] -r); do
            curl -i -X DELETE \
              -H "Accept: application/json" \
              -H "Authorization: JWT $HUB_TOKEN" \
              "https://hub.docker.com/v2/repositories/$org/$base_repo/tags/$base_tag-$arch/"
            curl -i -X DELETE \
              -H "Accept: application/json" \
              -H "Authorization: JWT $HUB_TOKEN" \
              "https://hub.docker.com/v2/repositories/$org/$notebooks_repo/tags/$notebooks_tag-$arch/"
          done
