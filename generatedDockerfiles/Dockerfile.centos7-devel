#
# This file was generated! Edits made directly to this file may be lost.
#   Timestamp:    Tue Feb  4 09:53:19 CST 2020
#
# RAPIDS Dockerfile for CentOS7 "devel" image
#
# RAPIDS is built from-source and installed in the base conda environment. The
# sources and toolchains to build RAPIDS are included in this image. RAPIDS
# jupyter notebooks are also provided, as well as jupyterlab and all the
# dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.

ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.1
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG LINUX_VERSION=centos7
ARG PYTHON_VERSION=3.7

FROM gpuci/miniconda-cuda-rapidsenv:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION}-py${PYTHON_VERSION}

# devel environment config args
ARG CC_VERSION=7
ARG CXX_VERSION=7
ARG PARALLEL_LEVEL=8

# devel environment core build pkgs
ARG BOOST_CPP_VERSION=1.70.0
ARG CMAKE_VERSION=3.14.5
ARG LIBGFORTRAN_NG_VERSION=7.3.0
ARG NUMBA_VERSION=0.46
ARG NUMPY_VERSION=1.17
ARG PANDAS_VERSION=0.25

# notebook pkgs
ARG IPYTHON_VERSION=7.3*

# base/runtime install specs
ARG DASK_XGBOOST_CONDA_VERSION_SPEC=0.2*
ARG RAPIDS_CONDA_VERSION_SPEC=0.12*

ARG CUDA_MAJORMINOR_VERSION
ARG PYTHON_VERSION

ENV RAPIDS_DIR=/rapids

# FIXME 20191002: remove this once gpuci base is rebuilt
RUN yum -y update \
    && yum -y install which patch \
    && yum clean all

# Install local gcc7
##TODO-mwendt I don't think we need NCCL installed and most of these pkgs are installed
###
### The support dir contains RPMs that enable additional repos needed
### for CentOS (among other things). Copy them to a temp dir and remove
### after installed.
###
##COPY supportfiles/*.rpm /tmp
##
##RUN yum install -y /tmp/*.rpm && \
##    rm -rf /tmp/*.rpm && \
##    yum upgrade -y && \
##    yum install -y \
##      bzip2 \
##      curl \
##      git \
##      screen \
##      vim \
##      wget \
##      which \
##      libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
##      libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
##      libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION}

# Install gcc7 from prebuilt image
COPY --from=gpuci/builds-gcc7:10.0-devel-centos7 /usr/local/gcc7 /usr/local/gcc7

# Update environment to use new gcc7
ENV GCC7_DIR=/usr/local/gcc7
ENV CC=${GCC7_DIR}/bin/gcc
ENV CXX=${GCC7_DIR}/bin/g++
ENV PATH=${GCC7_DIR}/bin:$PATH
ENV CUDAHOSTCXX=${GCC7_DIR}/bin/g++
##TODO-mwendt Not sure this should be restricted to just the GCC7_DIR
ENV LD_LIBRARY_PATH=${GCC7_DIR}/lib64

# Copy files needed by RAPIDS and 3rd parties for builds, test, and runtime.
RUN mkdir -p ${RAPIDS_DIR} ${GCC7_DIR}/lib64
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/utils

# Install core pkgs for development (these will not be overwritten by next install)
COPY supportfiles/.condarc /opt/conda/.condarc

#
# FIXME: ucx-py build dep should not need to be manually installed, should
# instead get pulled in from rapids meta-package - investigate.
#
RUN ${RAPIDS_DIR}/utils/condaretry install -y --freeze-installed conda-build \
    && source activate rapids \
    && env \
    && pip install sphinx-markdown-tables \
    && conda info \
    && conda config --show-sources \
    && conda list --show-channel-urls \
    && conda remove -y \
         nomkl \
    && ${RAPIDS_DIR}/utils/condaretry install -y -n rapids --freeze-installed \
         black \
         boost-cpp=${BOOST_CPP_VERSION} \
         cmake=${CMAKE_VERSION} \
         "cmake_setuptools>=0.1.3" \
         "cupy>=6.6.0,<7" \
         "cython>=0.29,<0.30" \
         double-conversion \
         dlpack \
         flake8 \
         flatbuffers \
         graphviz \
         hypothesis \
         rapidsai::libclang \
         libcypher-parser \
         libgfortran-ng=${LIBGFORTRAN_NG_VERSION} \
         lapack \
         liblapack \
         make \
         numba=${NUMBA_VERSION} \
         numpy=${NUMPY_VERSION} \
         pandas=${PANDAS_VERSION} \
         pytest \
         rapidjson \
         blas=*=openblas \
         sphinx \
         sphinx_rtd_theme \
         numpydoc \
         sphinxcontrib-websupport \
         nbsphinx \
         recommonmark \
         doxygen \
         "pandoc<=2.0.0" \
         ucx-py \
         \
         cudatoolkit=${CUDA_MAJORMINOR_VERSION} \
         rapids=${RAPIDS_CONDA_VERSION_SPEC} \
         gdal=2.4.* \
         \
         bokeh \
         dask-labextension \
         dask-ml \
         ipython=${IPYTHON_VERSION} \
         jupyterlab \
         librdkafka=1.2.2 \
         matplotlib \
         networkx \
         nodejs \
         pytest \
         scikit-learn \
         scipy \
         seaborn \
         tensorflow=*=gpu* \
         umap-learn \
    && conda remove --force \
         rmm librmm \
         nvstrings libnvstrings \
         cudf dask-cudf libcudf \
         cuml libcuml \
         cugraph libcugraph \
         cuspatial libcuspatial \
         xgboost py-xgboost libxgboost \
         dask-xgboost rapids-xgboost \
         custreamz \
         rapids \
    && conda clean -afy \
    && chmod -R ugo+w /opt/conda

# Add compatible libm
COPY supportfiles/libm.so.6 ${GCC7_DIR}/lib64

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the repoSettings file.
RUN cd ${RAPIDS_DIR} && ./clone.sh

# Build RAPIDS

# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps
# This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)
ENV LD_LIBRARY_PATH_PREBUILD=${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs

# xgboost build will not find nccl in the conda env without this env var
ENV NCCL_ROOT=/opt/conda/envs/rapids

# PARALLEL_LEVEL is a Docker ARG, set it in the ENV too
ENV PARALLEL_LEVEL=${PARALLEL_LEVEL}

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
RUN cd ${RAPIDS_DIR}/rmm && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cudf && \
    source activate rapids && \
    ./build.sh && \
    #FIXME: Should building tests be integrated into build.sh?
    cd cpp/build && \
    make -j${PARALLEL_LEVEL} build_tests_nvstrings && \
    make -j${PARALLEL_LEVEL} build_tests_cudf
# FIXME: Should not need to set CUSPATIAL_HOME and CUDF_HOME variables
RUN cd ${RAPIDS_DIR}/cuspatial && \
    source activate rapids && \
    export CUSPATIAL_HOME="$PWD" && \
    export CUDF_HOME="$PWD/../cudf" && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cuml && \
    source activate rapids && \
    ./build.sh --allgpuarch libcuml cuml prims
RUN cd ${RAPIDS_DIR}/cugraph && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh xgboost
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh dask-xgboost
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh dask-cuda

# Change LD_LIBRARY_PATH to exclude /usr/local/cuda/* since
# numba.cuda cannot load that, and instead have it load
# /lib64/libcuda.so instead
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH_PREBUILD}

COPY supportfiles/.run_in_rapids /.run_in_rapids
ENTRYPOINT [ "/usr/bin/tini", "--", "/.run_in_rapids" ]

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Setup notebook environment
RUN source activate rapids \
   && pip install "git+https://github.com/rapidsai/jupyterlab-nvdashboard.git@master#egg=jupyterlab-nvdashboard" --upgrade \
   && jupyter labextension install dask-labextension jupyterlab-nvdashboard \
   && cd ${RAPIDS_DIR} \
   && ./clone.sh notebooks \
   && chmod -R ugo+w /opt/conda ${RAPIDS_DIR}

# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

# Change the entrypoint to start the Jupyter server prior to running commands
COPY supportfiles/.start_jupyter_run_in_rapids /.run_in_rapids

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.centos7-devel /Dockerfile.centos7-devel
