{% from 'partials/cleanup-chmod.dockerfile.j2' import cleanChmod %}
# RAPIDS Dockerfile for {{ os }} "base" image
#
# base: RAPIDS is installed from published conda packages to the 'rapids' conda
# environment.
#
# Copyright (c) {{ now.year }}, NVIDIA CORPORATION.

ARG CUDA_VER={{ DEFAULT_CUDA_VERSION }}
ARG LINUX_VER={{ os }}
ARG PYTHON_VER={{ DEFAULT_PYTHON_VERSION }}
ARG RAPIDS_VER={{ DEFAULT_NIGHTLY_RAPIDS_VERSION }}
ARG FROM_IMAGE=gpuci/rapidsai

FROM ${FROM_IMAGE}:${RAPIDS_VER}-cuda${CUDA_VER}-base-${LINUX_VER}-py${PYTHON_VER} AS rapids-core

{# base/runtime install specs #}
ARG DASK_XGBOOST_VER=0.2*
ARG RAPIDS_VER
ARG BUILD_BRANCH="branch-${RAPIDS_VER}"

RUN if [ "${BUILD_BRANCH}" = "main" ]; then sed -i '/nightly/d' /opt/conda/.condarc; fi

ENV RAPIDS_DIR=/rapids

{# Copy files needed by RAPIDS and 3rd parties for builds, test, and runtime. #}
RUN mkdir -p ${RAPIDS_DIR}/utils {{ "${GCC9_DIR}/lib64" if "centos" in os }}
COPY nbtest.sh nbtestlog2junitxml.py ${RAPIDS_DIR}/utils/

{% if "centos" in os %}
{# Add compatible libm #}
COPY libm.so.6 ${GCC9_DIR}/lib64
{% endif %}

{% include 'partials/os_pkgs.dockerfile.j2' %}

{% include 'partials/env_debug.dockerfile.j2' %}

RUN gpuci_conda_retry install -y -n rapids \
  "rapids=${RAPIDS_VER}*"

{# Patch for CVEs #}
{% include 'partials/patch.dockerfile.j2' %}

{# Run common commands #}
COPY packages.sh /opt/docker/bin/

{# Cleaup conda and set ACLs for all users #}
{{ cleanChmod(["${RAPIDS_DIR}"]) }}

WORKDIR ${RAPIDS_DIR}

{% include 'partials/entrypoint.dockerfile.j2' %}

FROM rapids-core AS rapids-std

ARG RAPIDS_VER
ARG CUDA_VER
ENV BLAZING_DIR=/blazing

RUN gpuci_conda_retry install -y -n rapids -c blazingsql-nightly -c blazingsql\
  "rapids-blazing=${RAPIDS_VER}*" \
  "cudatoolkit=${CUDA_VER}"

WORKDIR ${RAPIDS_DIR}

{# Cleanup conda and set ACLs for all users #}
{{ cleanChmod(["${RAPIDS_DIR}"]) }}

COPY entrypoint.sh /opt/docker/bin/entrypoint
ENTRYPOINT [ "/usr/bin/tini", "--", "/opt/docker/bin/entrypoint" ]

{# Set the default command to pass to the ENTRYPOINT if no command was given #}
CMD [ "/bin/bash" ]

FROM rapids-std

ARG RAPIDS_VER
ARG CUDA_VER

RUN gpuci_conda_retry install -y -n rapids -c pytorch \
    "clx=${RAPIDS_VER}" \
    "cudatoolkit=${CUDA_VER}"

WORKDIR ${RAPIDS_DIR}

{# Cleanup conda #}
{{ cleanChmod(["${RAPIDS_DIR}"]) }}

COPY entrypoint.sh /opt/docker/bin/entrypoint
ENTRYPOINT [ "/usr/bin/tini", "--", "/opt/docker/bin/entrypoint" ]

{# Set the default command to pass to the ENTRYPOINT if no command was given #}
CMD [ "/bin/bash" ]
