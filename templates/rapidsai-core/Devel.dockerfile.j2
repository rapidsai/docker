# RAPIDS Dockerfile for {{ os }} "devel" image
#
# RAPIDS is built from-source and installed in the base conda environment. The
# sources and toolchains to build RAPIDS are included in this image. RAPIDS
# jupyter notebooks are also provided, as well as jupyterlab and all the
# dependencies required to run them.
#
# Copyright (c) {{ now.year }}, NVIDIA CORPORATION.

ARG CUDA_VER={{ DEFAULT_CUDA_VERSION }}
ARG LINUX_VER={{ os }}
ARG PYTHON_VER={{ DEFAULT_PYTHON_VERSION }}
ARG RAPIDS_VER={{ DEFAULT_NIGHTLY_RAPIDS_VERSION }}
ARG FROM_IMAGE=gpuci/rapidsai

FROM ${FROM_IMAGE}:${RAPIDS_VER}-cuda${CUDA_VER}-devel-${LINUX_VER}-py${PYTHON_VER}

{# devel environment config args #}
ARG PARALLEL_LEVEL=8
ARG RAPIDS_VER
ARG CUDA_VER
ARG UCX_PY_VER
ARG BUILD_BRANCH="branch-${RAPIDS_VER}"
ARG LINUX_VER
ENV RAPIDS_VER=$RAPIDS_VER

RUN if [ "${BUILD_BRANCH}" = "main" ]; then sed -i '/nightly/d;/dask\/label\/dev/d' /opt/conda/.condarc; fi

ARG PYTHON_VER

ENV RAPIDS_DIR=/rapids

{% include 'partials/os_pkgs.dockerfile.j2' %}

{% if "ubuntu" in os %}
{# gsfonts is used to correctly render fonts in doxygen/graphviz diagrams #}
RUN apt-get update && apt-get install -y --no-install-recommends \
    gsfonts \
    && rm -rf /var/lib/apt/lists/*
{% endif %}

RUN mkdir -p ${RAPIDS_DIR}/utils

{# Install dependencies needed for devel: build deps + RAPIDS runtime deps +
notebook deps. This is done as a single install to ensure compatibility
between packages. #}
{% include 'partials/env_debug.dockerfile.j2' %}

{# Install rapids env pkg #}
{% if "amd64" in arch %}
RUN gpuci_mamba_retry install -y -n rapids \
      "rapids-build-env=${RAPIDS_VER}*" \
      "rapids-doc-env=${RAPIDS_VER}*" \
      "libcumlprims=${RAPIDS_VER}*" \
      "libcugraphops=${RAPIDS_VER}*" \
      "ucx-py=${UCX_PY_VER}.*" \
    && gpuci_conda_retry remove -y -n rapids --force-remove \
      "rapids-build-env=${RAPIDS_VER}*" \
      "rapids-doc-env=${RAPIDS_VER}*"
{% elif "arm64" in arch %}
RUN gpuci_mamba_retry install -y -n rapids \
      "rapids-build-env=${RAPIDS_VER}*" \
      "libcumlprims=${RAPIDS_VER}*" \
      "libcugraphops=${RAPIDS_VER}*" \
      "ucx-py=${UCX_PY_VER}.*" \
    && gpuci_conda_retry remove -y -n rapids --force-remove \
      "rapids-build-env=${RAPIDS_VER}*"
{% endif %}

{# Patch for CVEs #}
{% include 'partials/patch.dockerfile.j2' %}

{% include 'partials/env_debug.dockerfile.j2' %}

{% include 'partials/install_notebooks.dockerfile.j2' %}

COPY tag-repo.sh /usr/local/bin/tag-repo

{# Clone RAPIDS libraries #}
RUN cd ${RAPIDS_DIR} \
  && source activate rapids \
{% for lib in RAPIDS_LIBS | sort(attribute="update_submodules") %}
  && git clone -b {{ "branch-${RAPIDS_VER}" if lib.name == "xgboost" else lib.branch | default('${BUILD_BRANCH}') }} --depth 1 --single-branch {{ lib.repo_url }} \
  && cd {{ lib.name }} \
  && tag-repo \
  && git submodule update --init{{ ' --remote' if lib.update_submodules }} --recursive --no-single-branch --depth 1 {{ "\\" if not loop.last }}
  {{ "&& cd ${RAPIDS_DIR} \\" if not loop.last }}
{% endfor %}

{% if ( "rocky" in os or "centos" in os ) %}
{# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps
This will need to be removed later since it causes problems with certain runtime libs (numba.cuda) #}
ENV LD_LIBRARY_PATH_PREBUILD=${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs
{% endif %}

{# xgboost build will not find nccl in the conda env without this env var #}
ENV NCCL_ROOT=/opt/conda/envs/rapids
ENV PARALLEL_LEVEL=${PARALLEL_LEVEL}

{# Include 'rapids' conda env in LD_LIBRARY_PATH #}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/conda/envs/rapids/lib

ENV CUDAToolkit_ROOT="/usr/local/cuda"
ENV CUDACXX="/usr/local/cuda/bin/nvcc"

{# RAPIDS library build loop #}
{% for lib in RAPIDS_LIBS %}
RUN cd ${RAPIDS_DIR}/{{ lib.name }} && \
  source activate rapids && \
  {% if lib.name == "benchmark" %}
  cd rapids_pytest_benchmark && \
  python setup.py install

  {% elif lib.name == "cudf" %}
  ./build.sh --allgpuarch libcudf cudf dask_cudf libcudf_kafka cudf_kafka tests --cmake-args=\"-DCUDF_ENABLE_ARROW_S3=ON\"

  {% elif lib.name == "cuspatial" %}
  export CUSPATIAL_HOME="$PWD" && \
  export CUDF_HOME="$PWD/../cudf" && \
  ./build.sh libcuspatial cuspatial tests

  {% elif lib.name == "xgboost" %}
  mkdir -p build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DUSE_NCCL=ON -DUSE_CUDA=ON -DUSE_CUDF=ON \
        -DBUILD_WITH_SHARED_NCCL=ON \
        -DGDF_INCLUDE_DIR=$CONDA_PREFIX/include \
        -DCMAKE_CXX_STANDARD:STRING="17" \
        -DPLUGIN_RMM=ON \
        -DBUILD_WITH_CUDA_CUB=ON \
        -DRMM_ROOT=${RAPIDS_DIR}/rmm \
        -DCMAKE_BUILD_TYPE=release .. && \
  make -j && make -j install && \
  cd ../python-package && python setup.py install;

  {% elif lib.name == "cugraph" %}
  ./build.sh --allgpuarch libcugraph pylibcugraph cugraph cugraph-service cugraph-dgl cugraph-pyg

  {% elif lib.name == "cuml" %}
  ./build.sh --allgpuarch libcuml cuml prims

  {% elif lib.name == "raft"%}
  ./build.sh --allgpuarch --compile-lib libraft raft-dask pylibraft

  {% elif lib.name == "dask-cuda"%}
  python setup.py install

  {% else %}
  ./build.sh

  {% endif %}
{% endfor %}


{% if ( "rocky" in os or "centos" in os ) %}
{# Change LD_LIBRARY_PATH to exclude /usr/local/cuda/* since
numba.cuda cannot load that, and instead have it load
/lib64/libcuda.so instead #}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH_PREBUILD}
{% endif %}

COPY packages.sh /opt/docker/bin/

{# Cleaup conda and set ACLs for all users #}
{% include 'partials/cleanup-chmod.dockerfile.j2' %}

{% include 'partials/entrypoint.dockerfile.j2' %}
