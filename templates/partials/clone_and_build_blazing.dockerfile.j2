{# This partial clones the BlazingSQL repo and build and installs it into the rapids conda env. #}

{# Install build prerequisites #}
RUN gpuci_conda_retry install -y -n rapids -c blazingsql-nightly -c blazingsql \
      "blazingsql-build-env=${RAPIDS_VER}*" \
      "rapids-build-env=${RAPIDS_VER}*" \
      "cudatoolkit=${CUDA_VER}*" \
    && gpuci_conda_retry remove -y -n rapids --force-remove \
      "blazingsql-build-env=${RAPIDS_VER}*" \
      "rapids-build-env=${RAPIDS_VER}*"


ENV CUDF_HOME=/rapids/cudf

{# Clone, build, install #}
RUN mkdir -p ${BLAZING_DIR} \
    && cd ${BLAZING_DIR} \
    && git clone -b ${BUILD_BRANCH} https://github.com/BlazingDB/blazingsql.git

{# Add additional CUDA lib dir to LD_LIBRARY_PATH for "docker build".  This is
not needed when using the nvidia runtime with "docker run" since the nvidia
runtime also installs libcuda to a system location that client builds often
find. #}

{# Explicitly add the cuda runtime dir for the Blazing build, then remove once
build is done to keep the original LD_LIBRARY_PATH intact. #}
ENV LD_LIBRARY_PATH_ORIG=${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/compat

{% if "centos" in os %}
{# Remove libm added for older build compatibility, since this is not compatible
with libjvm needed by BlazingSQL
FIXME: this libm should no longer be needed anywhere, so consider removing it
in the RAPIDS images #}
RUN rm -f ${GCC9_DIR}/lib64/libm.so.6
{% endif %}

RUN source activate rapids \
    && cd ${BLAZING_DIR}/blazingsql \
    && ./build.sh

ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH_ORIG}
ENV LD_LIBRARY_PATH_ORIG=
